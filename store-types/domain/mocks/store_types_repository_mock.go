// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package store_types

import (
	context "context"
	domain "gitlab.smartcitiesperu.com/smartone/api-core/store-types/domain"

	mock "github.com/stretchr/testify/mock"

	paramsdomain "gitlab.smartcitiesperu.com/smartone/api-shared/params/domain"
)

// StoreTypeRepository is an autogenerated mock type for the StoreTypeRepository type
type StoreTypeRepository struct {
	mock.Mock
}

// CreateStoreType provides a mock function with given fields: ctx, storeTypeId, body
func (_m *StoreTypeRepository) CreateStoreType(ctx context.Context, storeTypeId string, body domain.CreateStoreTypeBody) (*string, error) {
	ret := _m.Called(ctx, storeTypeId, body)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.CreateStoreTypeBody) (*string, error)); ok {
		return rf(ctx, storeTypeId, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.CreateStoreTypeBody) *string); ok {
		r0 = rf(ctx, storeTypeId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.CreateStoreTypeBody) error); ok {
		r1 = rf(ctx, storeTypeId, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStoreType provides a mock function with given fields: ctx, storeTypeId
func (_m *StoreTypeRepository) DeleteStoreType(ctx context.Context, storeTypeId string) (bool, error) {
	ret := _m.Called(ctx, storeTypeId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, storeTypeId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, storeTypeId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, storeTypeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoreTypes provides a mock function with given fields: ctx, pagination
func (_m *StoreTypeRepository) GetStoreTypes(ctx context.Context, pagination paramsdomain.PaginationParams) ([]domain.StoreType, error) {
	ret := _m.Called(ctx, pagination)

	var r0 []domain.StoreType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, paramsdomain.PaginationParams) ([]domain.StoreType, error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, paramsdomain.PaginationParams) []domain.StoreType); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.StoreType)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, paramsdomain.PaginationParams) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalStoreTypes provides a mock function with given fields: ctx, pagination
func (_m *StoreTypeRepository) GetTotalStoreTypes(ctx context.Context, pagination paramsdomain.PaginationParams) (*int, error) {
	ret := _m.Called(ctx, pagination)

	var r0 *int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, paramsdomain.PaginationParams) (*int, error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, paramsdomain.PaginationParams) *int); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, paramsdomain.PaginationParams) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStoreType provides a mock function with given fields: ctx, storeTypeId, body
func (_m *StoreTypeRepository) UpdateStoreType(ctx context.Context, storeTypeId string, body domain.UpdateStoreTypeBody) error {
	ret := _m.Called(ctx, storeTypeId, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.UpdateStoreTypeBody) error); ok {
		r0 = rf(ctx, storeTypeId, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStoreTypeRepository creates a new instance of StoreTypeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStoreTypeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StoreTypeRepository {
	mock := &StoreTypeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
