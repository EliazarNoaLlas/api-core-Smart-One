// Code generated by mockery v2.20.0. DO NOT EDIT.

package users

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "gitlab.smartcitiesperu.com/smartone/api-core/users/domain"

	paramsdomain "gitlab.smartcitiesperu.com/smartone/api-shared/params/domain"

	sql "database/sql"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreatePerson provides a mock function with given fields: ctx, tx, userId, PersonId, body
func (_m *UserRepository) CreatePerson(ctx context.Context, tx *sql.Tx, userId string, PersonId string, body *domain.Person) (*string, error) {
	ret := _m.Called(ctx, tx, userId, PersonId, body)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, string, *domain.Person) (*string, error)); ok {
		return rf(ctx, tx, userId, PersonId, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, string, *domain.Person) *string); ok {
		r0 = rf(ctx, tx, userId, PersonId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, string, string, *domain.Person) error); ok {
		r1 = rf(ctx, tx, userId, PersonId, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, tx, userId, body
func (_m *UserRepository) CreateUser(ctx context.Context, tx *sql.Tx, userId string, body domain.CreateUserBody) (*string, error) {
	ret := _m.Called(ctx, tx, userId, body)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, domain.CreateUserBody) (*string, error)); ok {
		return rf(ctx, tx, userId, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, domain.CreateUserBody) *string); ok {
		r0 = rf(ctx, tx, userId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, string, domain.CreateUserBody) error); ok {
		r1 = rf(ctx, tx, userId, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserMain provides a mock function with given fields: ctx, userId, personId, body
func (_m *UserRepository) CreateUserMain(ctx context.Context, userId string, personId string, body domain.CreateUserBody) (*string, error) {
	ret := _m.Called(ctx, userId, personId, body)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, domain.CreateUserBody) (*string, error)); ok {
		return rf(ctx, userId, personId, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, domain.CreateUserBody) *string); ok {
		r0 = rf(ctx, userId, personId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, domain.CreateUserBody) error); ok {
		r1 = rf(ctx, userId, personId, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, userId
func (_m *UserRepository) DeleteUser(ctx context.Context, userId string) (bool, error) {
	ret := _m.Called(ctx, userId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMeByUser provides a mock function with given fields: ctx, userId
func (_m *UserRepository) GetMeByUser(ctx context.Context, userId string) (*domain.UserMeInfo, error) {
	ret := _m.Called(ctx, userId)

	var r0 *domain.UserMeInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.UserMeInfo, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.UserMeInfo); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserMeInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMenuByUser provides a mock function with given fields: ctx, userId
func (_m *UserRepository) GetMenuByUser(ctx context.Context, userId string) ([]domain.ModuleMenuUser, error) {
	ret := _m.Called(ctx, userId)

	var r0 []domain.ModuleMenuUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.ModuleMenuUser, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.ModuleMenuUser); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ModuleMenuUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantsByUser provides a mock function with given fields: ctx, userId
func (_m *UserRepository) GetMerchantsByUser(ctx context.Context, userId string) ([]domain.MerchantByUser, error) {
	ret := _m.Called(ctx, userId)

	var r0 []domain.MerchantByUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.MerchantByUser, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.MerchantByUser); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MerchantByUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModulePermissions provides a mock function with given fields: ctx, userId, codeModule
func (_m *UserRepository) GetModulePermissions(ctx context.Context, userId string, codeModule string) ([]domain.Permissions, error) {
	ret := _m.Called(ctx, userId, codeModule)

	var r0 []domain.Permissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]domain.Permissions, error)); ok {
		return rf(ctx, userId, codeModule)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []domain.Permissions); ok {
		r0 = rf(ctx, userId, codeModule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Permissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userId, codeModule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModules provides a mock function with given fields: ctx
func (_m *UserRepository) GetModules(ctx context.Context) ([]domain.Module, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Module
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Module, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Module); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Module)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoresByUser provides a mock function with given fields: ctx, userId
func (_m *UserRepository) GetStoresByUser(ctx context.Context, userId string) ([]domain.StoreByUser, error) {
	ret := _m.Called(ctx, userId)

	var r0 []domain.StoreByUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.StoreByUser, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.StoreByUser); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.StoreByUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalUsers provides a mock function with given fields: ctx, searchParams, pagination
func (_m *UserRepository) GetTotalUsers(ctx context.Context, searchParams domain.GetUsersParams, pagination paramsdomain.PaginationParams) (*int, error) {
	ret := _m.Called(ctx, searchParams, pagination)

	var r0 *int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetUsersParams, paramsdomain.PaginationParams) (*int, error)); ok {
		return rf(ctx, searchParams, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetUsersParams, paramsdomain.PaginationParams) *int); ok {
		r0 = rf(ctx, searchParams, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.GetUsersParams, paramsdomain.PaginationParams) error); ok {
		r1 = rf(ctx, searchParams, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, userId
func (_m *UserRepository) GetUser(ctx context.Context, userId string) (*domain.User, error) {
	ret := _m.Called(ctx, userId)

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: ctx, tx, userId
func (_m *UserRepository) GetUserById(ctx context.Context, tx *sql.Tx, userId string) (*domain.UserById, error) {
	ret := _m.Called(ctx, tx, userId)

	var r0 *domain.UserById
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) (*domain.UserById, error)); ok {
		return rf(ctx, tx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) *domain.UserById); ok {
		r0 = rf(ctx, tx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserById)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, string) error); ok {
		r1 = rf(ctx, tx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUserNameAndPassword provides a mock function with given fields: ctx, userName, passwordHash
func (_m *UserRepository) GetUserByUserNameAndPassword(ctx context.Context, userName string, passwordHash string) (*domain.User, *string, error) {
	ret := _m.Called(ctx, userName, passwordHash)

	var r0 *domain.User
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.User, *string, error)); ok {
		return rf(ctx, userName, passwordHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.User); ok {
		r0 = rf(ctx, userName, passwordHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *string); ok {
		r1 = rf(ctx, userName, passwordHash)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, userName, passwordHash)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUsers provides a mock function with given fields: ctx, searchParams, pagination
func (_m *UserRepository) GetUsers(ctx context.Context, searchParams domain.GetUsersParams, pagination paramsdomain.PaginationParams) ([]domain.UserMultiple, error) {
	ret := _m.Called(ctx, searchParams, pagination)

	var r0 []domain.UserMultiple
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetUsersParams, paramsdomain.PaginationParams) ([]domain.UserMultiple, error)); ok {
		return rf(ctx, searchParams, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetUsersParams, paramsdomain.PaginationParams) []domain.UserMultiple); ok {
		r0 = rf(ctx, searchParams, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UserMultiple)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.GetUsersParams, paramsdomain.PaginationParams) error); ok {
		r1 = rf(ctx, searchParams, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPasswordUser provides a mock function with given fields: ctx, userId, passwordHash
func (_m *UserRepository) ResetPasswordUser(ctx context.Context, userId string, passwordHash string) (bool, error) {
	ret := _m.Called(ctx, userId, passwordHash)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, userId, passwordHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, userId, passwordHash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userId, passwordHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePerson provides a mock function with given fields: ctx, tx, personId, userId, body
func (_m *UserRepository) UpdatePerson(ctx context.Context, tx *sql.Tx, personId string, userId string, body *domain.Person) error {
	ret := _m.Called(ctx, tx, personId, userId, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, string, *domain.Person) error); ok {
		r0 = rf(ctx, tx, personId, userId, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePersonToUser provides a mock function with given fields: ctx, tx, peopleId, userId
func (_m *UserRepository) UpdatePersonToUser(ctx context.Context, tx *sql.Tx, peopleId string, userId string) error {
	ret := _m.Called(ctx, tx, peopleId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, string) error); ok {
		r0 = rf(ctx, tx, peopleId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, userId, body
func (_m *UserRepository) UpdateUser(ctx context.Context, userId string, body domain.UpdateUserBody) error {
	ret := _m.Called(ctx, userId, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.UpdateUserBody) error); ok {
		r0 = rf(ctx, userId, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserMain provides a mock function with given fields: ctx, userId, personId, body
func (_m *UserRepository) UpdateUserMain(ctx context.Context, userId string, personId string, body domain.UpdateUserBody) error {
	ret := _m.Called(ctx, userId, personId, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, domain.UpdateUserBody) error); ok {
		r0 = rf(ctx, userId, personId, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateUniquePersonByDocument provides a mock function with given fields: ctx, typeDocumentId, document
func (_m *UserRepository) ValidateUniquePersonByDocument(ctx context.Context, typeDocumentId string, document string) error {
	ret := _m.Called(ctx, typeDocumentId, document)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, typeDocumentId, document)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateUniqueUserExistence provides a mock function with given fields: ctx, tx, userId
func (_m *UserRepository) ValidateUniqueUserExistence(ctx context.Context, tx *sql.Tx, userId string) error {
	ret := _m.Called(ctx, tx, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) error); ok {
		r0 = rf(ctx, tx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyIfPersonExist provides a mock function with given fields: ctx, personId
func (_m *UserRepository) VerifyIfPersonExist(ctx context.Context, personId string) error {
	ret := _m.Called(ctx, personId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, personId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyIfUserExist provides a mock function with given fields: ctx, userId
func (_m *UserRepository) VerifyIfUserExist(ctx context.Context, userId string) error {
	ret := _m.Called(ctx, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyPermissionsByUser provides a mock function with given fields: ctx, userId, storeId, codePermission
func (_m *UserRepository) VerifyPermissionsByUser(ctx context.Context, userId string, storeId string, codePermission string) (bool, error) {
	ret := _m.Called(ctx, userId, storeId, codePermission)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return rf(ctx, userId, storeId, codePermission)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, userId, storeId, codePermission)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, userId, storeId, codePermission)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
