// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package rolePolicies

import (
	context "context"
	domain "gitlab.smartcitiesperu.com/smartone/api-core/role-policies/domain"

	mock "github.com/stretchr/testify/mock"

	paramsdomain "gitlab.smartcitiesperu.com/smartone/api-shared/params/domain"
)

// RolePolicyUseCase is an autogenerated mock type for the RolePolicyUseCase type
type RolePolicyUseCase struct {
	mock.Mock
}

// CreateRolePolicies provides a mock function with given fields: ctx, roleId, body
func (_m *RolePolicyUseCase) CreateRolePolicies(ctx context.Context, roleId string, body []domain.CreateRolePolicyBody) ([]string, error) {
	ret := _m.Called(ctx, roleId, body)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []domain.CreateRolePolicyBody) ([]string, error)); ok {
		return rf(ctx, roleId, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []domain.CreateRolePolicyBody) []string); ok {
		r0 = rf(ctx, roleId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []domain.CreateRolePolicyBody) error); ok {
		r1 = rf(ctx, roleId, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRolePolicy provides a mock function with given fields: ctx, roleId, body
func (_m *RolePolicyUseCase) CreateRolePolicy(ctx context.Context, roleId string, body domain.CreateRolePolicyBody) (*string, error) {
	ret := _m.Called(ctx, roleId, body)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.CreateRolePolicyBody) (*string, error)); ok {
		return rf(ctx, roleId, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.CreateRolePolicyBody) *string); ok {
		r0 = rf(ctx, roleId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.CreateRolePolicyBody) error); ok {
		r1 = rf(ctx, roleId, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRolePolicies provides a mock function with given fields: ctx, roleId, rolePolicyIds
func (_m *RolePolicyUseCase) DeleteRolePolicies(ctx context.Context, roleId string, rolePolicyIds []string) error {
	ret := _m.Called(ctx, roleId, rolePolicyIds)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, roleId, rolePolicyIds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRolePolicy provides a mock function with given fields: ctx, roleId, rolePolicyId
func (_m *RolePolicyUseCase) DeleteRolePolicy(ctx context.Context, roleId string, rolePolicyId string) (bool, error) {
	ret := _m.Called(ctx, roleId, rolePolicyId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, roleId, rolePolicyId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, roleId, rolePolicyId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, roleId, rolePolicyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicies provides a mock function with given fields: ctx, searchParams, pagination
func (_m *RolePolicyUseCase) GetPolicies(ctx context.Context, searchParams domain.GetRolePoliciesParams, pagination paramsdomain.PaginationParams) ([]domain.RolePolicy, *paramsdomain.PaginationResults, error) {
	ret := _m.Called(ctx, searchParams, pagination)

	var r0 []domain.RolePolicy
	var r1 *paramsdomain.PaginationResults
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetRolePoliciesParams, paramsdomain.PaginationParams) ([]domain.RolePolicy, *paramsdomain.PaginationResults, error)); ok {
		return rf(ctx, searchParams, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetRolePoliciesParams, paramsdomain.PaginationParams) []domain.RolePolicy); ok {
		r0 = rf(ctx, searchParams, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.RolePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.GetRolePoliciesParams, paramsdomain.PaginationParams) *paramsdomain.PaginationResults); ok {
		r1 = rf(ctx, searchParams, pagination)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*paramsdomain.PaginationResults)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.GetRolePoliciesParams, paramsdomain.PaginationParams) error); ok {
		r2 = rf(ctx, searchParams, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateRolePolicy provides a mock function with given fields: ctx, roleId, rolePolicyId, body
func (_m *RolePolicyUseCase) UpdateRolePolicy(ctx context.Context, roleId string, rolePolicyId string, body domain.UpdateRolePolicyBody) error {
	ret := _m.Called(ctx, roleId, rolePolicyId, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, domain.UpdateRolePolicyBody) error); ok {
		r0 = rf(ctx, roleId, rolePolicyId, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRolePolicyUseCase creates a new instance of RolePolicyUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRolePolicyUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *RolePolicyUseCase {
	mock := &RolePolicyUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
