// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package merchants

import (
	context "context"
	domain "gitlab.smartcitiesperu.com/smartone/api-core/merchants/domain"

	mock "github.com/stretchr/testify/mock"

	paramsdomain "gitlab.smartcitiesperu.com/smartone/api-shared/params/domain"
)

// MerchantRepository is an autogenerated mock type for the MerchantRepository type
type MerchantRepository struct {
	mock.Mock
}

// CreateMerchant provides a mock function with given fields: ctx, merchantId, body
func (_m *MerchantRepository) CreateMerchant(ctx context.Context, merchantId string, body domain.CreateMerchantBody) (*string, error) {
	ret := _m.Called(ctx, merchantId, body)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.CreateMerchantBody) (*string, error)); ok {
		return rf(ctx, merchantId, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.CreateMerchantBody) *string); ok {
		r0 = rf(ctx, merchantId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.CreateMerchantBody) error); ok {
		r1 = rf(ctx, merchantId, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMerchant provides a mock function with given fields: ctx, merchantId
func (_m *MerchantRepository) DeleteMerchant(ctx context.Context, merchantId string) (bool, error) {
	ret := _m.Called(ctx, merchantId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, merchantId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, merchantId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, merchantId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchants provides a mock function with given fields: ctx, pagination
func (_m *MerchantRepository) GetMerchants(ctx context.Context, pagination paramsdomain.PaginationParams) ([]domain.Merchant, error) {
	ret := _m.Called(ctx, pagination)

	var r0 []domain.Merchant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, paramsdomain.PaginationParams) ([]domain.Merchant, error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, paramsdomain.PaginationParams) []domain.Merchant); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Merchant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, paramsdomain.PaginationParams) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalMerchants provides a mock function with given fields: ctx, pagination
func (_m *MerchantRepository) GetTotalMerchants(ctx context.Context, pagination paramsdomain.PaginationParams) (*int, error) {
	ret := _m.Called(ctx, pagination)

	var r0 *int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, paramsdomain.PaginationParams) (*int, error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, paramsdomain.PaginationParams) *int); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, paramsdomain.PaginationParams) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMerchant provides a mock function with given fields: ctx, merchantId, body
func (_m *MerchantRepository) UpdateMerchant(ctx context.Context, merchantId string, body domain.UpdateMerchantBody) error {
	ret := _m.Called(ctx, merchantId, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.UpdateMerchantBody) error); ok {
		r0 = rf(ctx, merchantId, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMerchantRepository creates a new instance of MerchantRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMerchantRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MerchantRepository {
	mock := &MerchantRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
