// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/core/merchants/{merchantId}/stores": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get stores",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stores"
                ],
                "summary": "Get stores",
                "parameters": [
                    {
                        "type": "string",
                        "description": "merchant id",
                        "name": "merchantId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success Request",
                        "schema": {
                            "$ref": "#/definitions/rest.storesResult"
                        }
                    },
                    "500": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errorDomain.SmartError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stores"
                ],
                "summary": "Create store",
                "parameters": [
                    {
                        "type": "string",
                        "description": "merchant id",
                        "name": "merchantId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create store body",
                        "name": "createStoreBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.CreateStoreBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success Request",
                        "schema": {
                            "$ref": "#/definitions/httpResponse.IdResult"
                        }
                    },
                    "500": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errorDomain.SmartError"
                        }
                    }
                }
            }
        },
        "/api/v1/core/merchants/{merchantId}/stores/{storeId}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stores"
                ],
                "summary": "Update store",
                "parameters": [
                    {
                        "type": "string",
                        "description": "merchant id",
                        "name": "merchantId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "store id",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update store body",
                        "name": "updateStoreBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.CreateStoreBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success Request",
                        "schema": {
                            "$ref": "#/definitions/httpResponse.StatusResult"
                        }
                    },
                    "500": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errorDomain.SmartError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stores"
                ],
                "summary": "Delete a store",
                "parameters": [
                    {
                        "type": "string",
                        "description": "merchant id",
                        "name": "merchantId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "store id",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success Request",
                        "schema": {
                            "$ref": "#/definitions/rest.deleteStoresResult"
                        }
                    },
                    "500": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errorDomain.SmartError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.CreateStoreBody": {
            "type": "object",
            "required": [
                "name",
                "shortname",
                "store_type_id"
            ],
            "properties": {
                "name": {
                    "description": "Description: the name of the store",
                    "type": "string",
                    "example": "Obra av. 28 julio"
                },
                "shortname": {
                    "description": "Description: the shortname of the store",
                    "type": "string",
                    "example": "Obra 28"
                },
                "store_type_id": {
                    "description": "Description: the store_type_id of the store",
                    "type": "string",
                    "example": "739bbbc9-7e93-11ee-89fd-042hs5278420"
                }
            }
        },
        "domain.PaginationResults": {
            "type": "object",
            "required": [
                "current_page",
                "last_page",
                "size_page",
                "total"
            ],
            "properties": {
                "current_page": {
                    "type": "integer"
                },
                "from": {
                    "type": "integer"
                },
                "last_page": {
                    "type": "integer"
                },
                "size_page": {
                    "type": "integer"
                },
                "to": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "domain.Store": {
            "type": "object",
            "required": [
                "id",
                "merchant_id",
                "name",
                "shortname"
            ],
            "properties": {
                "created_at": {
                    "description": "Description: the created_at of the store",
                    "type": "string",
                    "example": "2023-11-10 08:10:00"
                },
                "id": {
                    "description": "Description: the id of the store",
                    "type": "string",
                    "example": "739bbbc9-7e93-11ee-89fd-0242ac110016"
                },
                "merchant_id": {
                    "description": "Description: the merchant_id of the store",
                    "type": "string",
                    "example": "739bbbc9-7e93-11ee-89fd-0442ac210931"
                },
                "name": {
                    "description": "Description: the name of the store",
                    "type": "string",
                    "example": "Obra av. 28 julio"
                },
                "shortname": {
                    "description": "Description: the shortname of the store",
                    "type": "string",
                    "example": "Obra 28"
                },
                "store_type": {
                    "$ref": "#/definitions/domain.StoreTypeByStore"
                }
            }
        },
        "domain.StoreTypeByStore": {
            "type": "object",
            "required": [
                "abbreviation",
                "description",
                "id"
            ],
            "properties": {
                "abbreviation": {
                    "description": "Description: the abbreviation of the store type",
                    "type": "string",
                    "example": "Maq."
                },
                "description": {
                    "description": "Description: the description of the store type",
                    "type": "string",
                    "example": "Maquinaria"
                },
                "id": {
                    "description": "Description: the id of the store type",
                    "type": "string",
                    "example": "739bbbc9-7e93-11ee-89fd-0242ac113421"
                }
            }
        },
        "errorDomain.LayerErr": {
            "type": "string",
            "enum": [
                "domain",
                "infrastructure",
                "interface",
                "use_case"
            ],
            "x-enum-varnames": [
                "Domain",
                "Infra",
                "Interface",
                "UseCase"
            ]
        },
        "errorDomain.LevelErr": {
            "type": "string",
            "enum": [
                "info",
                "warning",
                "error",
                "fatal"
            ],
            "x-enum-varnames": [
                "LevelInfo",
                "LevelWarning",
                "LevelError",
                "LevelFatal"
            ]
        },
        "errorDomain.SmartError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "error": {},
                "function": {
                    "type": "string"
                },
                "httpStatus": {
                    "type": "integer"
                },
                "layer": {
                    "$ref": "#/definitions/errorDomain.LayerErr"
                },
                "level": {
                    "$ref": "#/definitions/errorDomain.LevelErr"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "raw": {
                    "type": "string"
                }
            }
        },
        "httpResponse.IdResult": {
            "type": "object",
            "required": [
                "data",
                "status"
            ],
            "properties": {
                "data": {
                    "type": "string",
                    "example": "201"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "httpResponse.StatusResult": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "rest.deleteStoresResult": {
            "type": "object",
            "required": [
                "data",
                "status"
            ],
            "properties": {
                "data": {
                    "type": "boolean"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "rest.storesResult": {
            "type": "object",
            "required": [
                "data",
                "pagination",
                "status"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Store"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/domain.PaginationResults"
                },
                "status": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
