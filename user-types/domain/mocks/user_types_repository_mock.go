// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package userTypes

import (
	context "context"
	domain "gitlab.smartcitiesperu.com/smartone/api-core/user-types/domain"

	mock "github.com/stretchr/testify/mock"

	paramsdomain "gitlab.smartcitiesperu.com/smartone/api-shared/params/domain"
)

// UserTypeRepository is an autogenerated mock type for the UserTypeRepository type
type UserTypeRepository struct {
	mock.Mock
}

// CreateUserType provides a mock function with given fields: ctx, userTypeId, body
func (_m *UserTypeRepository) CreateUserType(ctx context.Context, userTypeId string, body domain.CreateUserTypeBody) (*string, error) {
	ret := _m.Called(ctx, userTypeId, body)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.CreateUserTypeBody) (*string, error)); ok {
		return rf(ctx, userTypeId, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.CreateUserTypeBody) *string); ok {
		r0 = rf(ctx, userTypeId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.CreateUserTypeBody) error); ok {
		r1 = rf(ctx, userTypeId, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserType provides a mock function with given fields: ctx, userTypeId
func (_m *UserTypeRepository) DeleteUserType(ctx context.Context, userTypeId string) (bool, error) {
	ret := _m.Called(ctx, userTypeId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, userTypeId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, userTypeId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userTypeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalUserTypes provides a mock function with given fields: ctx, pagination
func (_m *UserTypeRepository) GetTotalUserTypes(ctx context.Context, pagination paramsdomain.PaginationParams) (*int, error) {
	ret := _m.Called(ctx, pagination)

	var r0 *int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, paramsdomain.PaginationParams) (*int, error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, paramsdomain.PaginationParams) *int); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, paramsdomain.PaginationParams) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserTypes provides a mock function with given fields: ctx, pagination
func (_m *UserTypeRepository) GetUserTypes(ctx context.Context, pagination paramsdomain.PaginationParams) ([]domain.UserType, error) {
	ret := _m.Called(ctx, pagination)

	var r0 []domain.UserType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, paramsdomain.PaginationParams) ([]domain.UserType, error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, paramsdomain.PaginationParams) []domain.UserType); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UserType)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, paramsdomain.PaginationParams) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserType provides a mock function with given fields: ctx, userTypeId, body
func (_m *UserTypeRepository) UpdateUserType(ctx context.Context, userTypeId string, body domain.UpdateUserTypeBody) error {
	ret := _m.Called(ctx, userTypeId, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.UpdateUserTypeBody) error); ok {
		r0 = rf(ctx, userTypeId, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserTypeRepository creates a new instance of UserTypeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserTypeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserTypeRepository {
	mock := &UserTypeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
