// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package permissions

import (
	context "context"
	domain "gitlab.smartcitiesperu.com/smartone/api-core/permissions/domain"

	mock "github.com/stretchr/testify/mock"

	paramsdomain "gitlab.smartcitiesperu.com/smartone/api-shared/params/domain"
)

// PermissionRepository is an autogenerated mock type for the PermissionRepository type
type PermissionRepository struct {
	mock.Mock
}

// CreatePermission provides a mock function with given fields: ctx, moduleId, permissionId, body
func (_m *PermissionRepository) CreatePermission(ctx context.Context, moduleId string, permissionId string, body domain.CreatePermissionBody) (*string, error) {
	ret := _m.Called(ctx, moduleId, permissionId, body)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, domain.CreatePermissionBody) (*string, error)); ok {
		return rf(ctx, moduleId, permissionId, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, domain.CreatePermissionBody) *string); ok {
		r0 = rf(ctx, moduleId, permissionId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, domain.CreatePermissionBody) error); ok {
		r1 = rf(ctx, moduleId, permissionId, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePermission provides a mock function with given fields: ctx, moduleId, permissionId
func (_m *PermissionRepository) DeletePermission(ctx context.Context, moduleId string, permissionId string) (bool, error) {
	ret := _m.Called(ctx, moduleId, permissionId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, moduleId, permissionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, moduleId, permissionId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, moduleId, permissionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissions provides a mock function with given fields: ctx, moduleId, searchParams, pagination
func (_m *PermissionRepository) GetPermissions(ctx context.Context, moduleId string, searchParams domain.GetPermissionsParams, pagination paramsdomain.PaginationParams) ([]domain.Permission, error) {
	ret := _m.Called(ctx, moduleId, searchParams, pagination)

	var r0 []domain.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.GetPermissionsParams, paramsdomain.PaginationParams) ([]domain.Permission, error)); ok {
		return rf(ctx, moduleId, searchParams, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.GetPermissionsParams, paramsdomain.PaginationParams) []domain.Permission); ok {
		r0 = rf(ctx, moduleId, searchParams, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.GetPermissionsParams, paramsdomain.PaginationParams) error); ok {
		r1 = rf(ctx, moduleId, searchParams, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalPermissions provides a mock function with given fields: ctx, moduleId, searchParams
func (_m *PermissionRepository) GetTotalPermissions(ctx context.Context, moduleId string, searchParams domain.GetPermissionsParams) (*int, error) {
	ret := _m.Called(ctx, moduleId, searchParams)

	var r0 *int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.GetPermissionsParams) (*int, error)); ok {
		return rf(ctx, moduleId, searchParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.GetPermissionsParams) *int); ok {
		r0 = rf(ctx, moduleId, searchParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.GetPermissionsParams) error); ok {
		r1 = rf(ctx, moduleId, searchParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePermission provides a mock function with given fields: ctx, moduleId, permissionId, body
func (_m *PermissionRepository) UpdatePermission(ctx context.Context, moduleId string, permissionId string, body domain.UpdatePermissionBody) error {
	ret := _m.Called(ctx, moduleId, permissionId, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, domain.UpdatePermissionBody) error); ok {
		r0 = rf(ctx, moduleId, permissionId, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPermissionRepository creates a new instance of PermissionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPermissionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PermissionRepository {
	mock := &PermissionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
