// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package receipt_types

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "gitlab.smartcitiesperu.com/smartone/api-core/receipt-types/domain"
)

// ReceiptTypesUseCase is an autogenerated mock type for the ReceiptTypesUseCase type
type ReceiptTypesUseCase struct {
	mock.Mock
}

// CreateReceiptType provides a mock function with given fields: ctx, userId, body
func (_m *ReceiptTypesUseCase) CreateReceiptType(ctx context.Context, userId string, body domain.CreateReceiptTypeBody) (*string, error) {
	ret := _m.Called(ctx, userId, body)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.CreateReceiptTypeBody) (*string, error)); ok {
		return rf(ctx, userId, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.CreateReceiptTypeBody) *string); ok {
		r0 = rf(ctx, userId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.CreateReceiptTypeBody) error); ok {
		r1 = rf(ctx, userId, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReceiptType provides a mock function with given fields: ctx, receiptTypeId
func (_m *ReceiptTypesUseCase) DeleteReceiptType(ctx context.Context, receiptTypeId string) (bool, error) {
	ret := _m.Called(ctx, receiptTypeId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, receiptTypeId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, receiptTypeId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, receiptTypeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReceiptTypes provides a mock function with given fields: ctx
func (_m *ReceiptTypesUseCase) GetReceiptTypes(ctx context.Context) ([]domain.ReceiptType, error) {
	ret := _m.Called(ctx)

	var r0 []domain.ReceiptType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.ReceiptType, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.ReceiptType); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ReceiptType)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReceiptType provides a mock function with given fields: ctx, receiptTypeId, body
func (_m *ReceiptTypesUseCase) UpdateReceiptType(ctx context.Context, receiptTypeId string, body domain.UpdateReceiptTypeBody) error {
	ret := _m.Called(ctx, receiptTypeId, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.UpdateReceiptTypeBody) error); ok {
		r0 = rf(ctx, receiptTypeId, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewReceiptTypesUseCase creates a new instance of ReceiptTypesUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReceiptTypesUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReceiptTypesUseCase {
	mock := &ReceiptTypesUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
