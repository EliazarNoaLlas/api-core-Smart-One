// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package economic_activities

import (
	context "context"
	domain "gitlab.smartcitiesperu.com/smartone/api-core/economic-activities/domain"

	mock "github.com/stretchr/testify/mock"

	paramsdomain "gitlab.smartcitiesperu.com/smartone/api-shared/params/domain"
)

// EconomicActivityRepository is an autogenerated mock type for the EconomicActivityRepository type
type EconomicActivityRepository struct {
	mock.Mock
}

// GetEconomicActivities provides a mock function with given fields: ctx, searchParams, pagination
func (_m *EconomicActivityRepository) GetEconomicActivities(ctx context.Context, searchParams domain.GetEconomicActivitiesParams, pagination paramsdomain.PaginationParams) ([]domain.EconomicActivity, error) {
	ret := _m.Called(ctx, searchParams, pagination)

	var r0 []domain.EconomicActivity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetEconomicActivitiesParams, paramsdomain.PaginationParams) ([]domain.EconomicActivity, error)); ok {
		return rf(ctx, searchParams, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetEconomicActivitiesParams, paramsdomain.PaginationParams) []domain.EconomicActivity); ok {
		r0 = rf(ctx, searchParams, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.EconomicActivity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.GetEconomicActivitiesParams, paramsdomain.PaginationParams) error); ok {
		r1 = rf(ctx, searchParams, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalGetEconomicActivities provides a mock function with given fields: ctx, searchParams, pagination
func (_m *EconomicActivityRepository) GetTotalGetEconomicActivities(ctx context.Context, searchParams domain.GetEconomicActivitiesParams, pagination paramsdomain.PaginationParams) (*int, error) {
	ret := _m.Called(ctx, searchParams, pagination)

	var r0 *int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetEconomicActivitiesParams, paramsdomain.PaginationParams) (*int, error)); ok {
		return rf(ctx, searchParams, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetEconomicActivitiesParams, paramsdomain.PaginationParams) *int); ok {
		r0 = rf(ctx, searchParams, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.GetEconomicActivitiesParams, paramsdomain.PaginationParams) error); ok {
		r1 = rf(ctx, searchParams, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEconomicActivityRepository creates a new instance of EconomicActivityRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEconomicActivityRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *EconomicActivityRepository {
	mock := &EconomicActivityRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
