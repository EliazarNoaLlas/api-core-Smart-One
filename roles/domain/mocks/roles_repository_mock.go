// Code generated by mockery v2.20.2. DO NOT EDIT.

package roles

import (
	context "context"
	domain "gitlab.smartcitiesperu.com/smartone/api-core/roles/domain"

	mock "github.com/stretchr/testify/mock"

	paramsdomain "gitlab.smartcitiesperu.com/smartone/api-shared/params/domain"
)

// RoleRepository is an autogenerated mock type for the RoleRepository type
type RoleRepository struct {
	mock.Mock
}

// CreateRole provides a mock function with given fields: ctx, roleId, body
func (_m *RoleRepository) CreateRole(ctx context.Context, roleId string, body domain.CreateRoleBody) (*string, error) {
	ret := _m.Called(ctx, roleId, body)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.CreateRoleBody) (*string, error)); ok {
		return rf(ctx, roleId, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.CreateRoleBody) *string); ok {
		r0 = rf(ctx, roleId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.CreateRoleBody) error); ok {
		r1 = rf(ctx, roleId, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRole provides a mock function with given fields: ctx, roleId
func (_m *RoleRepository) DeleteRole(ctx context.Context, roleId string) (bool, error) {
	ret := _m.Called(ctx, roleId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, roleId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, roleId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, roleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoles provides a mock function with given fields: ctx, pagination
func (_m *RoleRepository) GetRoles(ctx context.Context, pagination paramsdomain.PaginationParams) ([]domain.Role, error) {
	ret := _m.Called(ctx, pagination)

	var r0 []domain.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, paramsdomain.PaginationParams) ([]domain.Role, error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, paramsdomain.PaginationParams) []domain.Role); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, paramsdomain.PaginationParams) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalRoles provides a mock function with given fields: ctx, pagination
func (_m *RoleRepository) GetTotalRoles(ctx context.Context, pagination paramsdomain.PaginationParams) (*int, error) {
	ret := _m.Called(ctx, pagination)

	var r0 *int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, paramsdomain.PaginationParams) (*int, error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, paramsdomain.PaginationParams) *int); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, paramsdomain.PaginationParams) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRole provides a mock function with given fields: ctx, roleId, body
func (_m *RoleRepository) UpdateRole(ctx context.Context, roleId string, body domain.CreateRoleBody) error {
	ret := _m.Called(ctx, roleId, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.CreateRoleBody) error); ok {
		r0 = rf(ctx, roleId, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRoleRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoleRepository creates a new instance of RoleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoleRepository(t mockConstructorTestingTNewRoleRepository) *RoleRepository {
	mock := &RoleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
