// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package policies

import (
	context "context"
	domain "gitlab.smartcitiesperu.com/smartone/api-core/policies/domain"

	mock "github.com/stretchr/testify/mock"

	paramsdomain "gitlab.smartcitiesperu.com/smartone/api-shared/params/domain"
)

// PolicyUseCase is an autogenerated mock type for the PolicyUseCase type
type PolicyUseCase struct {
	mock.Mock
}

// CreatePolicy provides a mock function with given fields: ctx, body
func (_m *PolicyUseCase) CreatePolicy(ctx context.Context, body domain.CreatePolicyBody) (*string, error) {
	ret := _m.Called(ctx, body)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreatePolicyBody) (*string, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreatePolicyBody) *string); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.CreatePolicyBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePolicy provides a mock function with given fields: ctx, policyId
func (_m *PolicyUseCase) DeletePolicy(ctx context.Context, policyId string) (bool, error) {
	ret := _m.Called(ctx, policyId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, policyId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, policyId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, policyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicies provides a mock function with given fields: ctx, searchParams, pagination
func (_m *PolicyUseCase) GetPolicies(ctx context.Context, searchParams domain.GetPoliciesParams, pagination paramsdomain.PaginationParams) ([]domain.Policy, *paramsdomain.PaginationResults, error) {
	ret := _m.Called(ctx, searchParams, pagination)

	var r0 []domain.Policy
	var r1 *paramsdomain.PaginationResults
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetPoliciesParams, paramsdomain.PaginationParams) ([]domain.Policy, *paramsdomain.PaginationResults, error)); ok {
		return rf(ctx, searchParams, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetPoliciesParams, paramsdomain.PaginationParams) []domain.Policy); ok {
		r0 = rf(ctx, searchParams, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.GetPoliciesParams, paramsdomain.PaginationParams) *paramsdomain.PaginationResults); ok {
		r1 = rf(ctx, searchParams, pagination)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*paramsdomain.PaginationResults)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.GetPoliciesParams, paramsdomain.PaginationParams) error); ok {
		r2 = rf(ctx, searchParams, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdatePolicy provides a mock function with given fields: ctx, body, policyId
func (_m *PolicyUseCase) UpdatePolicy(ctx context.Context, body domain.UpdatePolicyBody, policyId string) error {
	ret := _m.Called(ctx, body, policyId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UpdatePolicyBody, string) error); ok {
		r0 = rf(ctx, body, policyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPolicyUseCase creates a new instance of PolicyUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPolicyUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *PolicyUseCase {
	mock := &PolicyUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
