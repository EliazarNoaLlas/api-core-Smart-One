// Code generated by mockery v2.20.2. DO NOT EDIT.

package views

import (
	context "context"
	domain "gitlab.smartcitiesperu.com/smartone/api-core/views/domain"

	mock "github.com/stretchr/testify/mock"

	paramsdomain "gitlab.smartcitiesperu.com/smartone/api-shared/params/domain"
)

// ViewUseCase is an autogenerated mock type for the ViewUseCase type
type ViewUseCase struct {
	mock.Mock
}

// CreateView provides a mock function with given fields: ctx, moduleId, body
func (_m *ViewUseCase) CreateView(ctx context.Context, moduleId string, body domain.CreateViewBody) (*string, error) {
	ret := _m.Called(ctx, moduleId, body)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.CreateViewBody) (*string, error)); ok {
		return rf(ctx, moduleId, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.CreateViewBody) *string); ok {
		r0 = rf(ctx, moduleId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.CreateViewBody) error); ok {
		r1 = rf(ctx, moduleId, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteView provides a mock function with given fields: ctx, moduleId, viewId
func (_m *ViewUseCase) DeleteView(ctx context.Context, moduleId string, viewId string) (bool, error) {
	ret := _m.Called(ctx, moduleId, viewId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, moduleId, viewId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, moduleId, viewId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, moduleId, viewId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetViews provides a mock function with given fields: ctx, moduleId, searchParams, pagination
func (_m *ViewUseCase) GetViews(ctx context.Context, moduleId string, searchParams domain.GetViewsParams, pagination paramsdomain.PaginationParams) ([]domain.View, *paramsdomain.PaginationResults, error) {
	ret := _m.Called(ctx, moduleId, searchParams, pagination)

	var r0 []domain.View
	var r1 *paramsdomain.PaginationResults
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.GetViewsParams, paramsdomain.PaginationParams) ([]domain.View, *paramsdomain.PaginationResults, error)); ok {
		return rf(ctx, moduleId, searchParams, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.GetViewsParams, paramsdomain.PaginationParams) []domain.View); ok {
		r0 = rf(ctx, moduleId, searchParams, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.View)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.GetViewsParams, paramsdomain.PaginationParams) *paramsdomain.PaginationResults); ok {
		r1 = rf(ctx, moduleId, searchParams, pagination)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*paramsdomain.PaginationResults)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, domain.GetViewsParams, paramsdomain.PaginationParams) error); ok {
		r2 = rf(ctx, moduleId, searchParams, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateView provides a mock function with given fields: ctx, moduleId, viewId, body
func (_m *ViewUseCase) UpdateView(ctx context.Context, moduleId string, viewId string, body domain.UpdateViewBody) error {
	ret := _m.Called(ctx, moduleId, viewId, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, domain.UpdateViewBody) error); ok {
		r0 = rf(ctx, moduleId, viewId, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewViewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewViewUseCase creates a new instance of ViewUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewViewUseCase(t mockConstructorTestingTNewViewUseCase) *ViewUseCase {
	mock := &ViewUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
