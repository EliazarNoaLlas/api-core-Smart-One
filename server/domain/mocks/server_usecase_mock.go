// Code generated by mockery v2.42.1. DO NOT EDIT.

package server

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "gitlab.smartcitiesperu.com/smartone/api-core/server/domain"
)

// ServerUseCase is an autogenerated mock type for the ServerUseCase type
type ServerUseCase struct {
	mock.Mock
}

// GetServerDate provides a mock function with given fields: ctx
func (_m *ServerUseCase) GetServerDate(ctx context.Context) (*domain.ServerDate, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetServerDate")
	}

	var r0 *domain.ServerDate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*domain.ServerDate, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *domain.ServerDate); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServerDate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServerUseCase creates a new instance of ServerUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServerUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServerUseCase {
	mock := &ServerUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
