// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package policyPermissions

import (
	context "context"
	domain "gitlab.smartcitiesperu.com/smartone/api-core/policy-permissions/domain"

	mock "github.com/stretchr/testify/mock"

	paramsdomain "gitlab.smartcitiesperu.com/smartone/api-shared/params/domain"
)

// PolicyPermissionRepository is an autogenerated mock type for the PolicyPermissionRepository type
type PolicyPermissionRepository struct {
	mock.Mock
}

// CreatePolicyPermission provides a mock function with given fields: ctx, policyId, policyPermissionId, body
func (_m *PolicyPermissionRepository) CreatePolicyPermission(ctx context.Context, policyId string, policyPermissionId string, body domain.CreatePolicyPermissionBody) (*string, error) {
	ret := _m.Called(ctx, policyId, policyPermissionId, body)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, domain.CreatePolicyPermissionBody) (*string, error)); ok {
		return rf(ctx, policyId, policyPermissionId, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, domain.CreatePolicyPermissionBody) *string); ok {
		r0 = rf(ctx, policyId, policyPermissionId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, domain.CreatePolicyPermissionBody) error); ok {
		r1 = rf(ctx, policyId, policyPermissionId, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePolicyPermissions provides a mock function with given fields: ctx, policyId, body
func (_m *PolicyPermissionRepository) CreatePolicyPermissions(ctx context.Context, policyId string, body []domain.CreatePolicyPermissionMultipleBody) error {
	ret := _m.Called(ctx, policyId, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []domain.CreatePolicyPermissionMultipleBody) error); ok {
		r0 = rf(ctx, policyId, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePolicyPermission provides a mock function with given fields: ctx, policyId, policyPermissionId
func (_m *PolicyPermissionRepository) DeletePolicyPermission(ctx context.Context, policyId string, policyPermissionId string) (bool, error) {
	ret := _m.Called(ctx, policyId, policyPermissionId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, policyId, policyPermissionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, policyId, policyPermissionId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, policyId, policyPermissionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePolicyPermissions provides a mock function with given fields: ctx, policyId, policyPermissionIds
func (_m *PolicyPermissionRepository) DeletePolicyPermissions(ctx context.Context, policyId string, policyPermissionIds []string) error {
	ret := _m.Called(ctx, policyId, policyPermissionIds)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, policyId, policyPermissionIds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPolicyPermissionsByPolicy provides a mock function with given fields: ctx, policyId, pagination
func (_m *PolicyPermissionRepository) GetPolicyPermissionsByPolicy(ctx context.Context, policyId string, pagination paramsdomain.PaginationParams) ([]domain.PolicyPermission, error) {
	ret := _m.Called(ctx, policyId, pagination)

	var r0 []domain.PolicyPermission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, paramsdomain.PaginationParams) ([]domain.PolicyPermission, error)); ok {
		return rf(ctx, policyId, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, paramsdomain.PaginationParams) []domain.PolicyPermission); ok {
		r0 = rf(ctx, policyId, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PolicyPermission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, paramsdomain.PaginationParams) error); ok {
		r1 = rf(ctx, policyId, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalPolicyPermissionsByPolicy provides a mock function with given fields: ctx, policyId, pagination
func (_m *PolicyPermissionRepository) GetTotalPolicyPermissionsByPolicy(ctx context.Context, policyId string, pagination paramsdomain.PaginationParams) (*int, error) {
	ret := _m.Called(ctx, policyId, pagination)

	var r0 *int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, paramsdomain.PaginationParams) (*int, error)); ok {
		return rf(ctx, policyId, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, paramsdomain.PaginationParams) *int); ok {
		r0 = rf(ctx, policyId, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, paramsdomain.PaginationParams) error); ok {
		r1 = rf(ctx, policyId, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePolicyPermission provides a mock function with given fields: ctx, policyId, policyPermissionId, body
func (_m *PolicyPermissionRepository) UpdatePolicyPermission(ctx context.Context, policyId string, policyPermissionId string, body domain.CreatePolicyPermissionBody) error {
	ret := _m.Called(ctx, policyId, policyPermissionId, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, domain.CreatePolicyPermissionBody) error); ok {
		r0 = rf(ctx, policyId, policyPermissionId, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyPolicyHasPermission provides a mock function with given fields: ctx, policyId, permissionId
func (_m *PolicyPermissionRepository) VerifyPolicyHasPermission(ctx context.Context, policyId string, permissionId string) (bool, error) {
	ret := _m.Called(ctx, policyId, permissionId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, policyId, permissionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, policyId, permissionId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, policyId, permissionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPolicyPermissionRepository creates a new instance of PolicyPermissionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPolicyPermissionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PolicyPermissionRepository {
	mock := &PolicyPermissionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
